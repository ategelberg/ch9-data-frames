# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
view(salaries)
View(salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
slaries$change <- salaries_2018 - salaries_2017
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
US_Personal_Expenditure <- data.frame(USPersonalExpenditure)
View(USPersonalExpenditure)
# What are the column names of your dataframe?
data[col_names]
# What are the column names of your dataframe?
col_names(USPersonalExpenditure)
# What are the column names of your dataframe?
col_names(US_Personal_Expenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
# What are the row names of your dataframe?
nrow(USPersonalExpenditure)
# What are the row names of your dataframe?
ronames(USPersonalExpenditure)
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
US_Personal_Expenditure$category <- rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
US_Personal_Expenditure$category <- rownames(US_Personal_Expenditure)
# result in a new variable
US_Personal_Expenditure <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(US_Personal_Expenditure)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(US_Personal_Expenditure)
# Add a column "category" to your data frame that contains the rownames
US_Personal_Expenditure$category <- rownames(US_Personal_Expenditure)
# How much money was spent on personal care in 1940?
care_1940 <- US_Personal_Expenditure['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- US_Personal_Expenditure['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
highest_1960 <- US_Personal_Expenditure$category[US_Personal_Expenditure$X1960 ==
max(US_Personal_Expenditure$X1960)]
lowest_category <- function(year) {
col <- paste0('x', year)
US_Personal_Expenditure$category[us_exp[, col] ==
min(US_Personal_Expenditure[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category <- sapply(seq(1940, 1960, 5), lowest_category)
lowest_category <- function(year) {
col <- paste0('x', year)
US_Personal_Expenditure$category[US_Personal_Expenditure[, col] ==
min(US_Personal_Expenditure[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category <- sapply(seq(1940, 1960, 5), lowest_category)
lowest_category <- function(year) {
col <- paste0('X', year)
US_Personal_Expenditure$category[US_Personal_Expenditure[, col] ==
min(US_Personal_Expenditure[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category <- sapply(seq(1940, 1960, 5), lowest_category)
lowest_category
setwd("~/Desktop/UW/info201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean_grant <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
# Which organization received the largest grant?
largest_recipient <- organization[grants$total_amount == largest_grant]
# Which organization received the largest grant?
largest_recipient <- organization[grants$total_amount == largest_grant]
# Which organization received the smallest grant?
smallest_recipient <- organization[grants$total_amount == smallest_grant]
smallest_recipient
length(grants$start_year == 2010)
length(grants$total_amount[grants$start_year == 2010])
